

%option noyywrap
%x MODE_ML_COMMENT
%x MODE_SL_COMMENT
%x MODE_STRING
%x MODE_CHARSEQ

%{

  //####################

#include <iostream>
#include <string>
#include <cassert>

#define YY_NO_UNISTD_H

#include "token_id.hpp"

#include "src_lexer.hpp"
#include <quan/atomicstring.hpp>

#define YY_DECL int quan_lexer::src_lexer::yylex(token_type & tok)

#define yyterminate() \
   tok.m_position = m_position;\
   return tok.m_token_id = quan_lexer::token::eof;

#undef yywrap
#define yywrap() 1

#undef yyFlexLexer

using std::cin;
using std::cout;
using std::cerr;

   //#############################
   // derive own class from
   // yyFlexLexer
   // the yyFlexLexer must be defined
   // for linkage purposes

int yyFlexLexer::yylex(){assert(false); return 0;}

%} /*############################## */

 /* scanner */

BLANK             [ \t]
ALPHA             [A-Za-z]
DIGIT             [0-9]
HEXDIGIT          [0-9A-Fa-f]
OPERATOR          [!&-+*/=~|<>^?~%#@]
PUNCT             [\(\)\{\}\[\]\:\;\,\.\"]
NOTNL             .
IDCHAR            {ALPHA}|"_"
UNIXNEWL          [\n]
MACNEWL           [\r]
ESCCHAR           [\'\"\\abfnrtv]
NEWL              {UNIXNEWL}|({MACNEWL}{UNIXNEWL}?)
NONESCAPECHAR     {ALPHA}|{DIGIT}|{OPERATOR}|{PUNCT}|"_"
HEXESCAPE         "\\x\("{HEXDIGIT}+"\)"
DECESCAPE         "\\d\("{DIGIT}+"\)"
CHARESCAPE        "\\"{ESCCHAR}
 /* any of 256 source characters */
ANY               ({NOTNL}|{NEWL})
 /* normal string/char seq character: any but quote,  or backslash */
STRCHAR           [^\'\"\\\n\a\b\v\t\f\r]

%%  /*############################### */

  /*----------------------  initial -----------------------*/

<INITIAL>{BLANK}+ {
   m_position.column += yyleng;
}

<INITIAL>{NEWL} {
   m_position.column = 1; ++m_position.row;
}

<INITIAL>"\"" {
   // start string mode
   m_lexeme = "";
   tok.m_position = m_position;
   ++m_position.column;
   BEGIN(MODE_STRING);
}

<INITIAL>"'" {
   // start charseq mode
   m_lexeme = "";
   tok.m_position = m_position;
   ++m_position.column;
   BEGIN(MODE_CHARSEQ);
}

<INITIAL>"/*" {
     // start of multi line comment
      BEGIN(MODE_ML_COMMENT);
}

<INITIAL>"//" {
    // start of single line comment
      BEGIN(MODE_SL_COMMENT);
}

<INITIAL>"state" {
   return do_tokenID(tok,quan_lexer::STATE_);
}

<INITIAL>"jump" {
   return do_tokenID(tok,quan_lexer::JUMP_);
}

<INITIAL>"append" {
   return do_tokenID(tok,quan_lexer::APPEND_);
}

<INITIAL>"emit" {
   return do_tokenID(tok,quan_lexer::EMIT_);
}

<INITIAL>"pushfpos" {
   return do_tokenID(tok,quan_lexer::PUSHFPOS_);
}

<INITIAL>"popfpos" {
   return do_tokenID(tok,quan_lexer::POPFPOS_);
}

<INITIAL>"default" {
   return do_tokenID(tok,quan_lexer::DEFAULT_);
}

<INITIAL>{IDCHAR}({IDCHAR}|{DIGIT})* {
   return do_string_handle(tok);
}

<INITIAL>".." {
   return do_tokenID(tok,quan_lexer::DOT_DOT_);
}

<INITIAL>"$"|"."|"="|","|"|"|"&"|";"|"{"|"}"|"?"|"*"|"+"|"("|")"|"!"|"["|"]" {
   return do_tokenID(tok);
}

   /* ------------------- string  ---------------------*/

<MODE_STRING>"\"" {
   // end of the string
   ++m_position.column;
   BEGIN(INITIAL);
   return do_string_literal(tok);
}

<MODE_STRING>{NEWL} {
   do_error(tok,"raw return char in string literal");
   m_position.column = 1; ++m_position.row;
   m_lexeme = "";
   BEGIN(INITIAL);
   return tok.m_token_id = quan_lexer::token::error;
}

   /*--------------charseq -----------------------------*/

<MODE_CHARSEQ>"'" {
   ++m_position.column;
   BEGIN(INITIAL);
   return do_charseq(tok);
}

<MODE_CHARSEQ>"\"" {
   m_lexeme += yytext;
   m_position.column += yyleng;
}

<MODE_CHARSEQ,MODE_STRING>{HEXESCAPE} {
   m_lexeme += yytext;
   m_position.column += yyleng;
}

<MODE_CHARSEQ,MODE_STRING>{DECESCAPE} {
   m_lexeme += yytext;
   m_position.column += yyleng;
}

<MODE_CHARSEQ,MODE_STRING>{CHARESCAPE} {
   m_lexeme += yytext;
   m_position.column += yyleng;
}

<MODE_CHARSEQ>{NEWL} {
   do_error(tok,"raw return char in character_set");
   m_position.column = 1; ++m_position.row;
   m_lexeme = "";
   BEGIN(INITIAL);
   return tok.m_token_id = quan_lexer::token::error;
}

   /*---- common string  and character sequence --- */

<MODE_CHARSEQ,MODE_STRING>"\\"{NOTNL} {
   do_error(tok,"unknown escape char");
   m_lexeme = "";
   m_position.column += yyleng;
   return tok.m_token_id = quan_lexer::token::error;
}

<MODE_STRING,MODE_CHARSEQ>{STRCHAR}+  {
   m_lexeme += yytext;
   m_position.column += yyleng;
}

   /*--------------comment (multiline)  -----------------------------*/

<MODE_ML_COMMENT>"*"+"/"  {
   BEGIN(INITIAL);
}

<MODE_ML_COMMENT>{NEWL}  {
   //update the file pos
   m_position.column = 1; ++m_position.row;
}

<MODE_ML_COMMENT>.  {
   /* eat anything else  */
}

   /*--------------comment (single line)  -----------------------------*/

<MODE_SL_COMMENT>{NEWL} {
   m_position.column = 1; ++m_position.row;
   BEGIN(INITIAL);
}

<MODE_SL_COMMENT>. {
   /* eat anything else */
}

   /*anything else */

<INITIAL,MODE_CHARSEQ,MODE_STRING>. {
   do_error(tok,"undefined character");
   m_lexeme = "";
   m_position.column += yyleng;
   return tok.m_token_id = quan_lexer::token::error;
}

%%
