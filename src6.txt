
   /*** sample lexer ***/

/*
  The lexer can be in various states , which are defined here
  A new state is entered when a particular character is encountered.
  For example if in the main state and a " is encountered then run then enter the string literal state
  The first state definition is the default state
*/

   state main, string_literal, mlcomment, slcomment ;

   
/*
   Emit functions may also be predefined or they could be deduced and stubs used to get things working
*/
   emit String, Keyword, Integer, Real, Ident;

/*
   The underlying engine calls supplied library which has functions that take input buffer as arg and return a token
*/
   
/*
  expressions describe patterns of characters for matching. They can be global or local to a state in scope
*/
   // a global expression named newl
   newl = '\n' | "\r\n" ;
 
   /*
       Within an expression, some characters cannot be represented as text, 
       so they must be represented using escapes.

       a '\' character read in a string literal represents the start of an escaped character
       Valid characters following escape are \"'abfnrtv
       To represent arbitrary numbers use the syntax
       '\d(65)'  // is the character value decimal 65
       '\x(FF)'  // is the character value hex FF

       Example
       my_lit = "*\tline1 = \"\d(65)\d(66)\d(67)\"\n*\tline2 = \'\x(42)\'\x(43)\n*\tline3 = \o(103)\n";
       my_lit represents a string_literal which should produce when formatted :
         
       *    line1 = "ABC" 
       *    line2 = 'B'C
       *    line3 = C

       Characters in single quotes represent a character_set. 
       Characters in double quotes represent a string. 
       A character_set with a single character is equivalent 
       to a string with a single character and is known as a single_character.
       A sequence can be represented using double dots
       e.g 'A' .. 'Z'
       The empty_set can be represented by "" or ''
   */

   /*
     lexing creates a string, which is passed to the emit functions which return a token
   */


   state string_literal {

     '"'       [ emit String, state main ]
     .         [ append $ ] // append anything else
   } 

   state main {

       space      =  ' \t'               ;
       exp        =  'eE'                ;
       sign       =  '+-'                ;
       alpha      =  'A'..'Z' | 'a'..'z' ;
       digit      =  '0'..'9'            ;
       alnum      =  alpha | digit       ;
       ident      =  ( alnum & !digit | '_' ) ( alnum | '_' )* ;
       int        =  digit+                                     ;
       exponent   =  exp sign? digit+                           ;
       real       =  digit* '.' digit+ exponent?          |
                     digit+ ( '.' exponent? | exponent )  ;
       ws         = ( space | newl )+       ;

      "/*"      [ state mlcomment ]  
      "//"      [ state slcomment ] 
      '"'       [ state string_literal ] 

      "keyword" [ emit Keyword   ]
      int       [ emit Integer  ]
      real      [ emit Real     ]
      ws        []     
      '(' | ')' [ emit $ ]
      ident     [ emit Ident ]
   }

   state mlcomment {
     
      "*/"      [ state main ] 
      .         [] // eat anything else
   }

   state slcomment {

      newl      [ state main ]
      .         [ ] //eat anything else
   }
